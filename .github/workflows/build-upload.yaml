name: Build & Upload (Android, iOS)
 
on:
  # push:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'prod'
        type: choice
        options:
        - dev
        - stg
        - prod
 
jobs:
  ###################################
  # Initial Setup
  ###################################
  setup:
    runs-on: self-hosted
    timeout-minutes: 20
    environment: ${{ github.event.inputs.environment || 'prod' }}
    env:
      DEPLOY_ENV: ${{ github.event.inputs.environment || 'prod' }}

    steps:
    - name: Clone repository
      uses: actions/checkout@v4
 
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        # * Reminder: enable caching on GitHub-hosted runners, disable on self-hosted runners
        # Syntax reference: https://github.com/subosito/flutter-action?tab=readme-ov-file#caching
        # cache: true
        # cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
        # cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

    # Generate .env.<flavor> file as it is gitignored but needed for the build
    - name: Setup Dart Defines
      run: echo "${{ secrets.DART_DEFINES }}" | base64 --decode > .env.${{ env.DEPLOY_ENV }}
    
    # Write all the gitignored Firebase files that are needed for the build
    # You can remove this step if you've added them to Git
    - name: Setup Firebase
      env:
        FIREBASE_JSON: ${{ secrets.FIREBASE_JSON }}
        FIREBASE_OPTIONS_DART: ${{ secrets.FIREBASE_OPTIONS_DART }}
        GOOGLE_SERVICE_PLIST: ${{ secrets.GOOGLE_SERVICE_PLIST }}      
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      run: |
        echo "$FIREBASE_OPTIONS_DART" | base64 --decode > lib/firebase_options_${{ env.DEPLOY_ENV }}.dart        
        echo "$GOOGLE_SERVICES_JSON" | base64 --decode > android/app/src/${{ env.DEPLOY_ENV }}/google-services.json
        mkdir -p ios/flavors/${{ env.DEPLOY_ENV }}
        echo "$GOOGLE_SERVICE_PLIST" | base64 --decode > ios/flavors/${{ env.DEPLOY_ENV }}/GoogleService-Info.plist
        echo "$FIREBASE_JSON" | base64 --decode > firebase.json
        # Needed by the "flutterfire bundle-service-file" build phase in Xcode
        dart pub global activate flutterfire_cli 1.0.1 --overwrite
        
    - name: Upload build files
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .env.${{ env.DEPLOY_ENV }}
          lib/firebase_options_${{ env.DEPLOY_ENV }}.dart
          android/app/src/${{ env.DEPLOY_ENV }}/google-services.json
          ios/flavors/${{ env.DEPLOY_ENV }}/GoogleService-Info.plist
          firebase.json

  ###################################
  # Build and Upload Android app
  ###################################
  build-android:
    needs:
      - setup
    runs-on: self-hosted
    timeout-minutes: 20
    environment: ${{ github.event.inputs.environment || 'prod' }}
    env:
      DEPLOY_ENV: ${{ github.event.inputs.environment || 'prod' }}

    steps:
    - name: Download build files
      uses: actions/download-artifact@v4
      with:
        name: build-files
    
    # Generate all the files needed for Android code signing
    - name: Setup Android Keystore
      env:
        ANDROID_KEYSTORE_PATH: ${{ github.workspace }}/android/android_keystore.jks
        ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE_JKS }}" | base64 --decode > ${{ env.ANDROID_KEYSTORE_PATH }}
        echo "storeFile=${{ env.ANDROID_KEYSTORE_PATH }}" > android/key.properties
        echo "storePassword=${{ env.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
        echo "keyPassword=${{ env.ANDROID_KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ env.ANDROID_KEY_ALIAS }}" >> android/key.properties

    - name: Build Android App
      run: flutter build appbundle --flavor ${{ env.DEPLOY_ENV }} -t lib/main_${{ env.DEPLOY_ENV }}.dart --dart-define-from-file=.env.${{ env.DEPLOY_ENV }} --obfuscate --split-debug-info=build

    - name: Prepare for Upload
      run: |
        PACKAGE_NAME=$(grep -E "namespace\s*=\s*\"[^\"]+\"" android/app/build.gradle | sed -E 's/.*"([^"]+)".*/\1/')
        if [ "${{ env.DEPLOY_ENV }}" != "prod" ]; then
          PACKAGE_NAME="${PACKAGE_NAME}.${{ env.DEPLOY_ENV }}"
        fi
        echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
        echo "AAB_PATH=${{ github.workspace }}/build/app/outputs/bundle/${{ env.DEPLOY_ENV }}Release/app-${{ env.DEPLOY_ENV }}-release.aab" >> $GITHUB_ENV
 
    - name: Upload to Google Play
      uses: r0adkll/upload-google-play@v1
      with:
        # Note: First version should be updated manually.
        # See: https://github.com/r0adkll/upload-google-play
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        packageName: ${{ env.PACKAGE_NAME }}
        releaseFiles: ${{ env.AAB_PATH }}
        track: 'production'

    - name: Upload debug symbols
      uses: actions/upload-artifact@v4
      with:
        name: debug-symbols-android
        path: |
          build/app.android*.symbols

  ###################################
  # Build and Upload iOS app
  ###################################
  build-ios:
    needs:
      - setup
    runs-on: self-hosted
    timeout-minutes: 20
    environment: ${{ github.event.inputs.environment || 'prod' }}
    env:
      DEPLOY_ENV: ${{ github.event.inputs.environment || 'prod' }}
      APP_STORE_CONNECT_ISSUER_ID: ${{ vars.APP_STORE_CONNECT_ISSUER_ID }}
      APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ vars.APP_STORE_CONNECT_KEY_IDENTIFIER }}
      APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
      CERTIFICATE_PRIVATE_KEY: ${{ secrets.CERTIFICATE_PRIVATE_KEY }}

    steps:
    - name: Download build files
      uses: actions/download-artifact@v4
      with:
        name: build-files    
    # https://docs.codemagic.io/knowledge-codemagic/codemagic-cli-tools/
    - name: Install Codemagic CLI tools
      run: pip install codemagic-cli-tools
 
    - name: Set up keychain
      run: keychain initialize
 
    - name: Fetch signing files
      run: |
        BUNDLE_ID=$(xcode-project detect-bundle-id)
        if [ "${{ env.DEPLOY_ENV }}" != "prod" ]; then
          BUNDLE_ID="${BUNDLE_ID}.${{ env.DEPLOY_ENV }}"
        fi        
        app-store-connect fetch-signing-files $BUNDLE_ID \
          --type IOS_APP_STORE \
          --create
 
    - name: Set up signing certificate
      run: keychain add-certificates
 
    - name: Set up code signing settings on Xcode project
      run: xcode-project use-profiles
 
    - name: Build iOS App
      run:
        flutter build ipa --export-options-plist=$HOME/export_options.plist --flavor ${{ env.DEPLOY_ENV }} -t lib/main_${{ env.DEPLOY_ENV }}.dart --dart-define-from-file=.env.${{ env.DEPLOY_ENV }} --obfuscate --split-debug-info=build
 
    - name: Upload to App Store Connect
      run: |
        IPA_FILE=$(find build/ios/ipa -name "*.ipa")
        app-store-connect publish --path "$IPA_FILE"

    - name: Upload debug symbols
      uses: actions/upload-artifact@v4
      with:
        name: debug-symbols-ios
        path: |
          build/ios/archive/Runner.xcarchive/dSYMs/        

  ###################################
  # Upload Debug Symbols to Sentry
  ###################################
  upload-sentry:
    needs:
      - build-android
      - build-ios
    runs-on: self-hosted
    timeout-minutes: 20
    
    steps:
    - name: Download Android debug symbols
      uses: actions/download-artifact@v4
      with:
        name: debug-symbols-android
        
    - name: Download iOS debug symbols
      uses: actions/download-artifact@v4
      with:
        name: debug-symbols-ios

    - name: Upload Debug Symbols to Sentry
      run: dart run sentry_dart_plugin